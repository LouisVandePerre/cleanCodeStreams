FUNCTIONAL PROGRAMMING / CLEAN CODE
//    List 1
//    List 2
//    for each occupation -> {
//        if has adjacent (period wise) mergable element (aka no full time credit)
//        add to list one
//     else add to list 2
//    }
//    call create for list 1
//    call create for each of list 2 (edit

      return Stream.of(occupationInWageCalculation, occupationInWageCalculation2)
            .flatMap(Collection::stream)
            .filter(occupation -> occupation.getReorganisationMeasure().map(reorganisaionMeasure -> reorganisaionMeasure.equals(FULL_TIME_TIME_CREDIT_OR_THEMATIC_LEAVE))
            .orElse(false))
            .map(occupation -> new TimeCredit(occupation.getPeriod(), new WorkSchedule(7)))
            .toList();

----------------------------------------------------------------------

The flatMap() operation has the effect of applying a one-to-many transformation to the elements of the stream, and then flattening the resulting elements into a new stream.


    private WebDeclarationPartTimeCalculBase mapToWebDeclarationPartTimeCalculBase(Occupation occupation) {
        return occupation.getCalculationBaseAllowance()
                .map(CalculationBaseAllowance::getPartTimeCalculBase)
                .flatMap()
                .map(partTimeCalculBase -> new WebDeclarationPartTimeCalculBase(partTimeCalculBase.getRemunerationTimeUnit().toString(), partTimeCalculBase.getPartTimeGrossSalary(), partTimeCalculBase.getJustification().toString()))
                .orElse(null);
    }

----------------------------------------------------------------------

    =>


flatmaps
Returns a stream consisting of the results of replacing each element of this stream with
the contents of a mapped stream produced by applying the provided mapping function to each element.

        Stream<Object> objectStream = workerRecords.getItems().stream().flatMap(workerRecord -> mapToTheoreticalWage(workerRecord, employmentContext));
        List<WebDeclarationTheoreticalWage> webDeclarationTheoreticalWages = objectStream;

        =>
                List<WebDeclarationTheoreticalWage> webDeclarationTheoreticalWages = workerRecords.getItems()
                .stream()
                .map(workerRecord -> mapToTheoreticalWage(workerRecord, employmentContext))
                .flatMap(Collection::stream).toList();

        return getByCalculationIdentifierWithAccountingOrganizationByRedistribution(calculationsCreationData, CalculationFinProfCreationData::getEmployerFiscalExemptionsByDay)
                .entrySet()
                .stream()
                .collect(toMap(
                        Entry::getKey,
                        entry -> entry.getValue().stream().flatMap(Collection::stream).toList()
                ));

----------------------------------------------------------------------

    public AdminInvoiceLines(List<CalculationCreationData> calculationCreationData, String priceGroup) {
        groupAccountingOrganizationsByMaterialCodesByIdentifiers(calculationCreationData)
                .forEach((identifier, accountingOrganizationsByMaterialCode) -> accountingOrganizationsByMaterialCode
                .forEach((materialCode, accountingOrganization) -> this.add(identifier.getWagePeriodEndDate(), materialCode, priceGroup, accountingOrganization)));
    }

--- lets fix these forEaches w streams into readable code (if you know how a flatmap works :-) )

    = >

            groupAccountingOrganizationsByMaterialCodesByIdentifiers(calculationCreationData)
                .entrySet().stream()

                .flatMap(entry -> entry.getValue().entrySet().stream().map(subEntry -> Map.entry(entry.getKey(), subEntry)))
                .forEach(entry -> {
                    var wagePeriodEndDate = entry.getKey().getWagePeriodEndDate();
                    var materialCode = entry.getValue().getKey();
                    var accountingOrganization = entry.getValue().getValue();
                    this.add(wagePeriodEndDate, materialCode, priceGroup, accountingOrganization);
                });



    =>         groupAccountingOrganizationsByMaterialCodesByIdentifiers(calculationCreationData)
                .entrySet().stream()
                .flatMap(entry -> entry.getValue().entrySet().stream().map(subEntry ->
                        new InvoiceLineCreationData(entry.getKey().getWagePeriodEndDate(), subEntry.getKey(), subEntry.getValue(), priceGroup)))
                .forEach(invoiceLineCreationData -> {
                    this.add(invoiceLineCreationData);
                });



    =>         groupAccountingOrganizationsByMaterialCodesByIdentifiers(calculationCreationData)
                .entrySet().stream()
                .flatMap(entry -> entry.getValue().entrySet().stream().map(subEntry ->
                        new InvoiceLineCreationData(
                                entry.getKey().getWagePeriodEndDate(),
                                subEntry.getKey(),
                                subEntry.getValue(),
                                priceGroup)))
                .forEach(this::add);

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

        Map<Identifier, Map<String, String>> accountingOrganizationsByMaterialCodesByIdentifiers = new HashMap<>();

        calculationCreationData.forEach(calculation -> {
            Identifier identifier = new Identifier(calculation.getAgreementEssReference(), calculation.getWagePeriodEndDate());

            String accountingOrganization = getAccountingOrganizationForWagePeriodEndDate(calculation.getAccountingOrganizationCreationData(), calculation.getWagePeriodEndDate());
            accountingOrganizationsByMaterialCodesByIdentifiers.put(
                    identifier,
                    getAccountingOrganizationsByMaterialCodeForCalculation(calculation, accountingOrganization));
        });

        return accountingOrganizationsByMaterialCodesByIdentifiers;

        => doesnt work

                return calculationCreationData
                .stream()
                .collect(Collectors.toMap(
                        calculation -> new Identifier(calculation.getAgreementEssReference(), calculation.getWagePeriodEndDate()),
                        calculation -> getAccountingOrganizationsByMaterialCodeForCalculation(
                                calculation,
                                getAccountingOrganizationForWagePeriodEndDate(
                                        calculation.getAccountingOrganizationCreationData(),
                                        calculation.getWagePeriodEndDate()))
                ));

        => fix

        return calculationCreationData
                .stream()
                .collect(Collectors.toMap(
                        calculation -> new Identifier(calculation.getAgreementEssReference(), calculation.getWagePeriodEndDate()),
                        calculation -> getAccountingOrganizationsByMaterialCodeForCalculation(
                                calculation,
                                getAccountingOrganizationForWagePeriodEndDate(
                                        calculation.getAccountingOrganizationCreationData(),
                                        calculation.getWagePeriodEndDate())),
                        (accountingOrganisation1, accountingOrganisation2) -> accountingOrganisation2));

        Why is this the fix? ==

        Let's introduce a merge function that indicates that, in the case of a collision, we keep the existing entry:

        public Map<Integer, Book> listToMapWithDupKey(List<Book> books) {
            return books.stream().collect(Collectors.toMap(Book::getReleaseYear, Function.identity(),
              (existing, replacement) -> existing));
        }

----------------------------------------------------------------------

instead of using if x == null use Optionals

var remainingNet = calculationsWithWageElements.stream()
                .filter(calculationTO -> calculationTO.getRemainingNet().isPresent())
                .map(calculationWithWageElement -> mapToCalculationCreationData(calculationWithWageElement, DEFAULT_CODE_FOR_REMAINING_NET, calculationWithWageElement.getRemainingNet().get()));

----------------------------------------------------------------------

Interesting examples van NielsJ

.collect
Performs a mutable reduction operation on the elements of this stream using a Collector.

Collectors
Implementations of Collector that implement various useful reduction operations, such as accumulating elements into collections, summarizing elements according to various criteria, etc.

The following are examples of using the predefined collectors to perform common mutable reduction tasks:

     // Accumulate names into a List
     List<String> list = people.stream().map(Person::getName).collect(Collectors.toList());

     // Accumulate names into a TreeSet
     Set<String> set = people.stream().map(Person::getName).collect(Collectors.toCollection(TreeSet::new));

     // Convert elements to strings and concatenate them, separated by commas
     String joined = things.stream()
                           .map(Object::toString)
                           .collect(Collectors.joining(", "));

     // Compute sum of salaries of employee
     int total = employees.stream()
                          .collect(Collectors.summingInt(Employee::getSalary)));

     // Group employees by department
     Map<Department, List<Employee>> byDept
         = employees.stream()
                    .collect(Collectors.groupingBy(Employee::getDepartment));

     // Compute sum of salaries by department
     Map<Department, Integer> totalByDept
         = employees.stream()
                    .collect(Collectors.groupingBy(Employee::getDepartment,
                                                   Collectors.summingInt(Employee::getSalary)));

     // Partition students into passing and failing
     Map<Boolean, List<Student>> passingFailing =
         students.stream()
                 .collect(Collectors.partitioningBy(s -> s.getGrade() >= PASS_THRESHOLD));

        Map<String, List<String>> categorized = items.stream()
                .collect(Collectors.groupingBy(Item::getCategory,
                        Collectors.mapping(
                                Item::getName, Collectors.toList())
                ));



        AllMatch

                 List<PersonCondition> lokiVariants = List.of(
                        new PersonCondition("Endgame Loki", true),
                        new PersonCondition("Lokigator", true),
                        new PersonCondition("Kid Loki", true)
                );

                boolean didTheyAllSurvive = lokiVariants.stream().allMatch(PersonCondition::isCondition);

                assertThat(didTheyAllSurvive).isTrue();

                List<PersonCondition> lokiVariants2 = List.of(
                        new PersonCondition("Endgame Loki", true),
                        new PersonCondition("Lokigator", true),
                        new PersonCondition("Kid Loki", true),
                        new PersonCondition("President Loki", false)
                );

                Boolean didTheyAllSurviveNow = lokiVariants2.stream().allMatch(PersonCondition::isCondition);

                assertThat(didTheyAllSurviveNow).isFalse();


Comparator
A comparison function, which imposes a total ordering on some collection of objects.
Comparators can be passed to a sort method (such as Collections.sort or Arrays.sort)
to allow precise control over the sort order. Comparators can also be used to control the order of certain data structures
(such as sorted sets or sorted maps), or to provide an ordering for collections of objects that don't have a natural ordering.

!!
The ordering imposed by a comparator c on a set of elements S is said to be consistent with equals
if and only if c.compare(e1, e2)==0 has the same boolean value as e1.equals(e2) for every e1 and e2 in S.

                Map<String, String> stonesLocations = Map.of(
                        "Space Stone", "Tessaract",
                        "Mind Stone", "Loki's Sceptre",
                        "Reality Stone", "The Aether",
                        "Power Stone", "Morag",
                        "Time Stone", "Eye of Agamotto",
                        "Soul Stone", "Vormir"
                );

                List<String> actual = stonesLocations.keySet()
                        .stream()
                        .sorted(Comparator.reverseOrder())
                        .collect(Collectors.toList());

                //results should be sorted alphabetically descending
                assertThat(actual).containsExactly(
                        "Time Stone",
                        "Space Stone",
                        "Soul Stone",
                        "Reality Stone",
                        "Power Stone",
                        "Mind Stone"
                );


