public class PartTimeRemunerationDeclarationReferencePeriodFactory {

    private PartTimeRemunerationDeclarationReferencePeriodFactory() {
    }determineReferencePeriodsOfWech006DeclarationsToCreate

    static List<ClosedPeriod> determineReferencePeriodsOfWech006DeclarationsToCreate(EmployeeWorkerRecords employeeWorkerRecords, ClosedPeriod wagePeriod) {
        var occupationsForWagePeriod = getSortedOccupationsForWagePeriod(employeeWorkerRecords, wagePeriod);
        var referencePeriods = new LinkedList<ClosedPeriod>();

        OccupationHistoryItem previousOccupation = null;
        while (occupationsForWagePeriod.hasNext()) {
            var currentOccupation = occupationsForWagePeriod.next();

            if (isReorganisationMeasureOfCurrentOccupationIsDifferentThanPrevious(previousOccupation, currentOccupation)) {
                referencePeriods.add(currentOccupation.getOccupationPeriod());
            } else {
                ClosedPeriod previousPeriod = referencePeriods.pollLast();
                referencePeriods.add(mergePreviousAndCurrentOccupationPeriods(previousPeriod, currentOccupation.getOccupationPeriod()));
            }
            previousOccupation = currentOccupation;
        }
        return referencePeriods;
    }

    private static Iterator<OccupationHistoryItem> getSortedOccupationsForWagePeriod(EmployeeWorkerRecords employeeWorkerRecords, ClosedPeriod wagePeriod) {
        return employeeWorkerRecords
                .findWithOverlappingOccupation(wagePeriod)
                .getOccupationOverlappingWith(wagePeriod)
                .stream()
                .sorted(comparing(OccupationHistoryItem::getOccupationPeriod))
                .toList()
                .iterator();
    }

    /**
     * Different in this context means that one reorganisationMeasure is either null or 4 (part-time), while the other is 3 (full-time)
     **/
    private static boolean isReorganisationMeasureOfCurrentOccupationIsDifferentThanPrevious(OccupationHistoryItem previousOccupation, OccupationHistoryItem currentOccupation) {
        if (previousOccupation == null) return true;

        var previousReorganisationMeasure = previousOccupation.getReorganisationMeasure().orElse(null);
        var currentReorganisationMeasure = currentOccupation.getReorganisationMeasure().orElse(null);

        return exactlyOneOfTheReorganisationMeasuresIsFullTime(previousReorganisationMeasure, currentReorganisationMeasure);
    }

    private static boolean exactlyOneOfTheReorganisationMeasuresIsFullTime(String previousReorganisationMeasure, String currentReorganisationMeasure) {
        return FULL_TIME_TIME_CREDIT_OR_THEMATIC_LEAVE.equals(previousReorganisationMeasure) ^ FULL_TIME_TIME_CREDIT_OR_THEMATIC_LEAVE.equals(currentReorganisationMeasure);
    }

    private static ClosedPeriod mergePreviousAndCurrentOccupationPeriods(ClosedPeriod previousPeriod, ClosedPeriod currentOccupation) {
        LocalDate startDate = previousPeriod == null ? currentOccupation.getClosedStartDate() : previousPeriod.getClosedStartDate();

        return ClosedPeriod.periodOf(startDate, currentOccupation.getClosedEndDate());
    }
}
